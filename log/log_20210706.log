resnet20 Quantization 1
2021年 07月 06日 星期二 09:00:23 CST
[16, 14, 14, 16, 16, 16, 16, 33, 32, 32, 32, 31, 30, 63, 63, 63, 63, 63, 60, 10]
----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:02:31 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
layer number: 20
------ layer: conv1 ------
size of uncompressed layer: 0.0016MB
shape: torch.Size([16, 3, 3, 3])
------ layer: layer1.0.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.0.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer2.0.conv1 ------
size of uncompressed layer: 0.0176MB
shape: torch.Size([32, 16, 3, 3])
------ layer: layer2.0.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer3.0.conv1 ------
size of uncompressed layer: 0.0703MB
shape: torch.Size([64, 32, 3, 3])
------ layer: layer3.0.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: linear ------
size of uncompressed layer: 0.0024MB
shape: torch.Size([10, 64])
conv1.dictionary
compressed layer : torch.Size([16, 3, 3, 3])
target layer :     torch.Size([16, 3, 3, 3])

conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.0.conv1.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv1.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.0.conv2.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv2.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.1.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:04:13 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:05:35 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
layer number: 20
------ layer: conv1 ------
size of uncompressed layer: 0.0016MB
shape: torch.Size([16, 3, 3, 3])
------ layer: layer1.0.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.0.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer2.0.conv1 ------
size of uncompressed layer: 0.0176MB
shape: torch.Size([32, 16, 3, 3])
------ layer: layer2.0.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer3.0.conv1 ------
size of uncompressed layer: 0.0703MB
shape: torch.Size([64, 32, 3, 3])
------ layer: layer3.0.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: linear ------
size of uncompressed layer: 0.0024MB
shape: torch.Size([10, 64])
conv1.dictionary
compressed layer : torch.Size([16, 3, 3, 3])
target layer :     torch.Size([16, 3, 3, 3])

conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.0.conv1.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv1.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.0.conv2.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv2.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.1.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.1.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer2.0.conv1.dictionary
compressed layer : torch.Size([33, 16, 3, 3])
target layer :     torch.Size([33, 16, 3, 3])

layer2.0.conv1.coef
compressed layer : torch.Size([32, 33, 1, 1])
target layer :     torch.Size([32, 33, 1, 1])

layer2.0.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([33, 32, 3, 3])

----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:19:04 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
layer number: 20
------ layer: conv1 ------
size of uncompressed layer: 0.0016MB
shape: torch.Size([16, 3, 3, 3])
------ layer: layer1.0.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.0.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer2.0.conv1 ------
size of uncompressed layer: 0.0176MB
shape: torch.Size([32, 16, 3, 3])
------ layer: layer2.0.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer3.0.conv1 ------
size of uncompressed layer: 0.0703MB
shape: torch.Size([64, 32, 3, 3])
------ layer: layer3.0.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: linear ------
size of uncompressed layer: 0.0024MB
shape: torch.Size([10, 64])
conv1.dictionary
compressed layer : torch.Size([16, 3, 3, 3])
target layer :     torch.Size([16, 3, 3, 3])

conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.0.conv1.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv1.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.0.conv2.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv2.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.1.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.1.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer2.0.conv1.dictionary
compressed layer : torch.Size([33, 16, 3, 3])
target layer :     torch.Size([33, 16, 3, 3])

layer2.0.conv1.coef
compressed layer : torch.Size([32, 33, 1, 1])
target layer :     torch.Size([32, 33, 1, 1])

layer2.0.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.0.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv1.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv1.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.2.conv1.dictionary
compressed layer : torch.Size([31, 32, 3, 3])
target layer :     torch.Size([31, 32, 3, 3])

layer2.2.conv1.coef
compressed layer : torch.Size([32, 31, 1, 1])
target layer :     torch.Size([32, 31, 1, 1])

layer2.2.conv2.dictionary
compressed layer : torch.Size([30, 32, 3, 3])
target layer :     torch.Size([30, 32, 3, 3])

layer2.2.conv2.coef
compressed layer : torch.Size([32, 30, 1, 1])
target layer :     torch.Size([32, 30, 1, 1])

layer3.0.conv1.dictionary
compressed layer : torch.Size([63, 32, 3, 3])
target layer :     torch.Size([63, 32, 3, 3])

layer3.0.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.0.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.0.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.2.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv2.dictionary
compressed layer : torch.Size([60, 64, 3, 3])
target layer :     torch.Size([60, 64, 3, 3])

layer3.2.conv2.coef
compressed layer : torch.Size([64, 60, 1, 1])
target layer :     torch.Size([64, 60, 1, 1])

linear.calcu.0
compressed layer : torch.Size([10, 64])
target layer :     torch.Size([10, 64])

linear.calcu.1
compressed layer : torch.Size([10, 10])
target layer :     torch.Size([10, 10])

----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:19:46 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
layer number: 20
------ layer: conv1 ------
size of uncompressed layer: 0.0016MB
shape: torch.Size([16, 3, 3, 3])
------ layer: layer1.0.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.0.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer2.0.conv1 ------
size of uncompressed layer: 0.0176MB
shape: torch.Size([32, 16, 3, 3])
------ layer: layer2.0.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer3.0.conv1 ------
size of uncompressed layer: 0.0703MB
shape: torch.Size([64, 32, 3, 3])
------ layer: layer3.0.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: linear ------
size of uncompressed layer: 0.0024MB
shape: torch.Size([10, 64])
conv1.dictionary
compressed layer : torch.Size([16, 3, 3, 3])
target layer :     torch.Size([16, 3, 3, 3])

conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.0.conv1.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv1.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.0.conv2.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv2.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.1.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.1.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer2.0.conv1.dictionary
compressed layer : torch.Size([33, 16, 3, 3])
target layer :     torch.Size([33, 16, 3, 3])

layer2.0.conv1.coef
compressed layer : torch.Size([32, 33, 1, 1])
target layer :     torch.Size([32, 33, 1, 1])

layer2.0.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.0.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv1.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv1.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.2.conv1.dictionary
compressed layer : torch.Size([31, 32, 3, 3])
target layer :     torch.Size([31, 32, 3, 3])

layer2.2.conv1.coef
compressed layer : torch.Size([32, 31, 1, 1])
target layer :     torch.Size([32, 31, 1, 1])

layer2.2.conv2.dictionary
compressed layer : torch.Size([30, 32, 3, 3])
target layer :     torch.Size([30, 32, 3, 3])

layer2.2.conv2.coef
compressed layer : torch.Size([32, 30, 1, 1])
target layer :     torch.Size([32, 30, 1, 1])

layer3.0.conv1.dictionary
compressed layer : torch.Size([63, 32, 3, 3])
target layer :     torch.Size([63, 32, 3, 3])

layer3.0.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.0.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.0.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.2.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv2.dictionary
compressed layer : torch.Size([60, 64, 3, 3])
target layer :     torch.Size([60, 64, 3, 3])

layer3.2.conv2.coef
compressed layer : torch.Size([64, 60, 1, 1])
target layer :     torch.Size([64, 60, 1, 1])

linear.calcu.0
compressed layer : torch.Size([10, 64])
target layer :     torch.Size([60, 64])

----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:22:43 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:23:25 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
layer number: 20
------ layer: conv1 ------
size of uncompressed layer: 0.0016MB
shape: torch.Size([16, 3, 3, 3])
------ layer: layer1.0.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.0.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer2.0.conv1 ------
size of uncompressed layer: 0.0176MB
shape: torch.Size([32, 16, 3, 3])
------ layer: layer2.0.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer3.0.conv1 ------
size of uncompressed layer: 0.0703MB
shape: torch.Size([64, 32, 3, 3])
------ layer: layer3.0.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: linear ------
size of uncompressed layer: 0.0024MB
shape: torch.Size([10, 64])
conv1.dictionary
compressed layer : torch.Size([16, 3, 3, 3])
target layer :     torch.Size([16, 3, 3, 3])

conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.0.conv1.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv1.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.0.conv2.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv2.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.1.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.1.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer2.0.conv1.dictionary
compressed layer : torch.Size([33, 16, 3, 3])
target layer :     torch.Size([33, 16, 3, 3])

layer2.0.conv1.coef
compressed layer : torch.Size([32, 33, 1, 1])
target layer :     torch.Size([32, 33, 1, 1])

layer2.0.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.0.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv1.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv1.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.2.conv1.dictionary
compressed layer : torch.Size([31, 32, 3, 3])
target layer :     torch.Size([31, 32, 3, 3])

layer2.2.conv1.coef
compressed layer : torch.Size([32, 31, 1, 1])
target layer :     torch.Size([32, 31, 1, 1])

layer2.2.conv2.dictionary
compressed layer : torch.Size([30, 32, 3, 3])
target layer :     torch.Size([30, 32, 3, 3])

layer2.2.conv2.coef
compressed layer : torch.Size([32, 30, 1, 1])
target layer :     torch.Size([32, 30, 1, 1])

layer3.0.conv1.dictionary
compressed layer : torch.Size([63, 32, 3, 3])
target layer :     torch.Size([63, 32, 3, 3])

layer3.0.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.0.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.0.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.2.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv2.dictionary
compressed layer : torch.Size([60, 64, 3, 3])
target layer :     torch.Size([60, 64, 3, 3])

layer3.2.conv2.coef
compressed layer : torch.Size([64, 60, 1, 1])
target layer :     torch.Size([64, 60, 1, 1])

linear.calcu.0
compressed layer : torch.Size([10, 64])
target layer :     torch.Size([10, 64])

linear.calcu.1
compressed layer : torch.Size([10, 10])
target layer :     torch.Size([10, 10])

----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:24:28 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
layer number: 20
------ layer: conv1 ------
size of uncompressed layer: 0.0016MB
shape: torch.Size([16, 3, 3, 3])
------ layer: layer1.0.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.0.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer2.0.conv1 ------
size of uncompressed layer: 0.0176MB
shape: torch.Size([32, 16, 3, 3])
------ layer: layer2.0.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer3.0.conv1 ------
size of uncompressed layer: 0.0703MB
shape: torch.Size([64, 32, 3, 3])
------ layer: layer3.0.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: linear ------
size of uncompressed layer: 0.0024MB
shape: torch.Size([10, 64])
conv1.dictionary
compressed layer : torch.Size([16, 3, 3, 3])
target layer :     torch.Size([16, 3, 3, 3])

conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.0.conv1.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv1.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.0.conv2.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv2.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.1.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.1.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer2.0.conv1.dictionary
compressed layer : torch.Size([33, 16, 3, 3])
target layer :     torch.Size([33, 16, 3, 3])

layer2.0.conv1.coef
compressed layer : torch.Size([32, 33, 1, 1])
target layer :     torch.Size([32, 33, 1, 1])

layer2.0.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.0.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv1.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv1.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.2.conv1.dictionary
compressed layer : torch.Size([31, 32, 3, 3])
target layer :     torch.Size([31, 32, 3, 3])

layer2.2.conv1.coef
compressed layer : torch.Size([32, 31, 1, 1])
target layer :     torch.Size([32, 31, 1, 1])

layer2.2.conv2.dictionary
compressed layer : torch.Size([30, 32, 3, 3])
target layer :     torch.Size([30, 32, 3, 3])

layer2.2.conv2.coef
compressed layer : torch.Size([32, 30, 1, 1])
target layer :     torch.Size([32, 30, 1, 1])

layer3.0.conv1.dictionary
compressed layer : torch.Size([63, 32, 3, 3])
target layer :     torch.Size([63, 32, 3, 3])

layer3.0.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.0.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.0.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.2.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv2.dictionary
compressed layer : torch.Size([60, 64, 3, 3])
target layer :     torch.Size([60, 64, 3, 3])

layer3.2.conv2.coef
compressed layer : torch.Size([64, 60, 1, 1])
target layer :     torch.Size([64, 60, 1, 1])

linear.calcu.0
compressed layer : torch.Size([10, 64])
target layer :     torch.Size([10, 64])

linear.calcu.1
compressed layer : torch.Size([10, 10])
target layer :     torch.Size([10, 10])

----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:24:38 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
layer number: 20
------ layer: conv1 ------
size of uncompressed layer: 0.0016MB
shape: torch.Size([16, 3, 3, 3])
------ layer: layer1.0.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.0.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer2.0.conv1 ------
size of uncompressed layer: 0.0176MB
shape: torch.Size([32, 16, 3, 3])
------ layer: layer2.0.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer3.0.conv1 ------
size of uncompressed layer: 0.0703MB
shape: torch.Size([64, 32, 3, 3])
------ layer: layer3.0.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: linear ------
size of uncompressed layer: 0.0024MB
shape: torch.Size([10, 64])
conv1.dictionary
compressed layer : torch.Size([16, 3, 3, 3])
target layer :     torch.Size([16, 3, 3, 3])

conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.0.conv1.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv1.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.0.conv2.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv2.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.1.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.1.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer2.0.conv1.dictionary
compressed layer : torch.Size([33, 16, 3, 3])
target layer :     torch.Size([33, 16, 3, 3])

layer2.0.conv1.coef
compressed layer : torch.Size([32, 33, 1, 1])
target layer :     torch.Size([32, 33, 1, 1])

layer2.0.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.0.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv1.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv1.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.2.conv1.dictionary
compressed layer : torch.Size([31, 32, 3, 3])
target layer :     torch.Size([31, 32, 3, 3])

layer2.2.conv1.coef
compressed layer : torch.Size([32, 31, 1, 1])
target layer :     torch.Size([32, 31, 1, 1])

layer2.2.conv2.dictionary
compressed layer : torch.Size([30, 32, 3, 3])
target layer :     torch.Size([30, 32, 3, 3])

layer2.2.conv2.coef
compressed layer : torch.Size([32, 30, 1, 1])
target layer :     torch.Size([32, 30, 1, 1])

layer3.0.conv1.dictionary
compressed layer : torch.Size([63, 32, 3, 3])
target layer :     torch.Size([63, 32, 3, 3])

layer3.0.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.0.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.0.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.2.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv2.dictionary
compressed layer : torch.Size([60, 64, 3, 3])
target layer :     torch.Size([60, 64, 3, 3])

layer3.2.conv2.coef
compressed layer : torch.Size([64, 60, 1, 1])
target layer :     torch.Size([64, 60, 1, 1])

linear.calcu.0
compressed layer : torch.Size([10, 64])
target layer :     torch.Size([10, 64])

linear.calcu.1
compressed layer : torch.Size([10, 10])
target layer :     torch.Size([10, 10])

Test: [0/79]	Acc@1 10.156 (10.156)	Acc@5 51.562 (51.562)
Test: [1/79]	Acc@1 10.156 (10.156)	Acc@5 49.219 (50.391)
Test: [2/79]	Acc@1 10.156 (10.156)	Acc@5 48.438 (49.740)
Test: [3/79]	Acc@1 9.375 (9.961)	Acc@5 46.094 (48.828)
Test: [4/79]	Acc@1 8.594 (9.688)	Acc@5 49.219 (48.906)
Test: [5/79]	Acc@1 7.812 (9.375)	Acc@5 51.562 (49.349)
Test: [6/79]	Acc@1 10.938 (9.598)	Acc@5 46.094 (48.884)
Test: [7/79]	Acc@1 11.719 (9.863)	Acc@5 47.656 (48.730)
Test: [8/79]	Acc@1 8.594 (9.722)	Acc@5 51.562 (49.045)
Test: [9/79]	Acc@1 10.156 (9.766)	Acc@5 43.750 (48.516)
Test: [10/79]	Acc@1 7.812 (9.588)	Acc@5 56.250 (49.219)
Test: [11/79]	Acc@1 9.375 (9.570)	Acc@5 52.344 (49.479)
Test: [12/79]	Acc@1 10.156 (9.615)	Acc@5 51.562 (49.639)
Test: [13/79]	Acc@1 13.281 (9.877)	Acc@5 50.000 (49.665)
Test: [14/79]	Acc@1 14.062 (10.156)	Acc@5 54.688 (50.000)
Test: [15/79]	Acc@1 9.375 (10.107)	Acc@5 44.531 (49.658)
Test: [16/79]	Acc@1 12.500 (10.248)	Acc@5 54.688 (49.954)
Test: [17/79]	Acc@1 10.156 (10.243)	Acc@5 50.781 (50.000)
Test: [18/79]	Acc@1 10.156 (10.238)	Acc@5 45.312 (49.753)
Test: [19/79]	Acc@1 12.500 (10.352)	Acc@5 57.031 (50.117)
Test: [20/79]	Acc@1 14.844 (10.565)	Acc@5 57.812 (50.484)
Test: [21/79]	Acc@1 10.156 (10.547)	Acc@5 57.812 (50.817)
Test: [22/79]	Acc@1 9.375 (10.496)	Acc@5 51.562 (50.849)
Test: [23/79]	Acc@1 10.938 (10.514)	Acc@5 53.906 (50.977)
Test: [24/79]	Acc@1 10.938 (10.531)	Acc@5 49.219 (50.906)
Test: [25/79]	Acc@1 9.375 (10.487)	Acc@5 47.656 (50.781)
Test: [26/79]	Acc@1 12.500 (10.561)	Acc@5 58.594 (51.071)
Test: [27/79]	Acc@1 13.281 (10.658)	Acc@5 56.250 (51.256)
Test: [28/79]	Acc@1 9.375 (10.614)	Acc@5 50.000 (51.212)
Test: [29/79]	Acc@1 9.375 (10.573)	Acc@5 49.219 (51.146)
Test: [30/79]	Acc@1 3.125 (10.333)	Acc@5 48.438 (51.058)
Test: [31/79]	Acc@1 10.156 (10.327)	Acc@5 51.562 (51.074)
Test: [32/79]	Acc@1 8.594 (10.275)	Acc@5 53.125 (51.136)
Test: [33/79]	Acc@1 5.469 (10.133)	Acc@5 54.688 (51.241)
Test: [34/79]	Acc@1 10.938 (10.156)	Acc@5 43.750 (51.027)
Test: [35/79]	Acc@1 10.156 (10.156)	Acc@5 51.562 (51.042)
Test: [36/79]	Acc@1 9.375 (10.135)	Acc@5 52.344 (51.077)
Test: [37/79]	Acc@1 8.594 (10.095)	Acc@5 45.312 (50.925)
Test: [38/79]	Acc@1 11.719 (10.136)	Acc@5 50.781 (50.921)
Test: [39/79]	Acc@1 9.375 (10.117)	Acc@5 50.000 (50.898)
Test: [40/79]	Acc@1 10.156 (10.118)	Acc@5 47.656 (50.819)
Test: [41/79]	Acc@1 7.031 (10.045)	Acc@5 49.219 (50.781)
Test: [42/79]	Acc@1 11.719 (10.084)	Acc@5 50.781 (50.781)
Test: [43/79]	Acc@1 14.062 (10.174)	Acc@5 48.438 (50.728)
Test: [44/79]	Acc@1 8.594 (10.139)	Acc@5 46.094 (50.625)
Test: [45/79]	Acc@1 7.812 (10.088)	Acc@5 43.750 (50.476)
Test: [46/79]	Acc@1 10.938 (10.106)	Acc@5 51.562 (50.499)
Test: [47/79]	Acc@1 11.719 (10.140)	Acc@5 57.031 (50.635)
Test: [48/79]	Acc@1 10.938 (10.156)	Acc@5 55.469 (50.733)
Test: [49/79]	Acc@1 6.250 (10.078)	Acc@5 49.219 (50.703)
Test: [50/79]	Acc@1 10.938 (10.095)	Acc@5 52.344 (50.735)
Test: [51/79]	Acc@1 11.719 (10.126)	Acc@5 53.125 (50.781)
Test: [52/79]	Acc@1 7.812 (10.083)	Acc@5 51.562 (50.796)
Test: [53/79]	Acc@1 13.281 (10.142)	Acc@5 59.375 (50.955)
Test: [54/79]	Acc@1 10.938 (10.156)	Acc@5 49.219 (50.923)
Test: [55/79]	Acc@1 7.031 (10.100)	Acc@5 42.188 (50.767)
Test: [56/79]	Acc@1 8.594 (10.074)	Acc@5 49.219 (50.740)
Test: [57/79]	Acc@1 11.719 (10.102)	Acc@5 51.562 (50.754)
Test: [58/79]	Acc@1 7.031 (10.050)	Acc@5 46.875 (50.689)
Test: [59/79]	Acc@1 13.281 (10.104)	Acc@5 56.250 (50.781)
Test: [60/79]	Acc@1 11.719 (10.131)	Acc@5 46.875 (50.717)
Test: [61/79]	Acc@1 9.375 (10.118)	Acc@5 50.000 (50.706)
Test: [62/79]	Acc@1 9.375 (10.107)	Acc@5 49.219 (50.682)
Test: [63/79]	Acc@1 13.281 (10.156)	Acc@5 46.875 (50.623)
Test: [64/79]	Acc@1 7.031 (10.108)	Acc@5 46.875 (50.565)
Test: [65/79]	Acc@1 5.469 (10.038)	Acc@5 45.312 (50.485)
Test: [66/79]	Acc@1 8.594 (10.016)	Acc@5 58.594 (50.606)
Test: [67/79]	Acc@1 7.812 (9.984)	Acc@5 52.344 (50.632)
Test: [68/79]	Acc@1 10.156 (9.986)	Acc@5 48.438 (50.600)
Test: [69/79]	Acc@1 12.500 (10.022)	Acc@5 50.000 (50.592)
Test: [70/79]	Acc@1 10.156 (10.024)	Acc@5 58.594 (50.704)
Test: [71/79]	Acc@1 10.938 (10.037)	Acc@5 51.562 (50.716)
Test: [72/79]	Acc@1 9.375 (10.028)	Acc@5 49.219 (50.696)
Test: [73/79]	Acc@1 6.250 (9.977)	Acc@5 55.469 (50.760)
Test: [74/79]	Acc@1 10.938 (9.990)	Acc@5 47.656 (50.719)
Test: [75/79]	Acc@1 10.938 (10.002)	Acc@5 51.562 (50.730)
Test: [76/79]	Acc@1 14.062 (10.055)	Acc@5 52.344 (50.751)
Test: [77/79]	Acc@1 6.250 (10.006)	Acc@5 53.125 (50.781)
Test: [78/79]	Acc@1 6.250 (10.000)	Acc@5 50.000 (50.780)
Top1 after quantization: 10.000, Top5 after quantization: 50.780

----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:25:42 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
layer number: 20
------ layer: conv1 ------
size of uncompressed layer: 0.0016MB
shape: torch.Size([16, 3, 3, 3])
----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:26:25 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
layer number: 20
------ layer: conv1 ------
size of uncompressed layer: 0.0016MB
shape: torch.Size([16, 3, 3, 3])
----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:29:42 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
layer number: 20
------ layer: conv1 ------
size of uncompressed layer: 0.0016MB
shape: torch.Size([16, 3, 3, 3])
------ layer: layer1.0.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.0.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer2.0.conv1 ------
size of uncompressed layer: 0.0176MB
shape: torch.Size([32, 16, 3, 3])
------ layer: layer2.0.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer3.0.conv1 ------
size of uncompressed layer: 0.0703MB
shape: torch.Size([64, 32, 3, 3])
------ layer: layer3.0.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: linear ------
size of uncompressed layer: 0.0024MB
shape: torch.Size([10, 64])
----------------------------------------------------------
resnet20 Quantization 1
2021年 07月 06日 星期二 09:35:55 CST
---------------Dataset: cifar10--------------
Files already downloaded and verified
Files already downloaded and verified
layer number: 20
------ layer: conv1 ------
size of uncompressed layer: 0.0016MB
shape: torch.Size([16, 3, 3, 3])
------ layer: layer1.0.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.0.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.1.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv1 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer1.2.conv2 ------
size of uncompressed layer: 0.0088MB
shape: torch.Size([16, 16, 3, 3])
------ layer: layer2.0.conv1 ------
size of uncompressed layer: 0.0176MB
shape: torch.Size([32, 16, 3, 3])
------ layer: layer2.0.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.1.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv1 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer2.2.conv2 ------
size of uncompressed layer: 0.0352MB
shape: torch.Size([32, 32, 3, 3])
------ layer: layer3.0.conv1 ------
size of uncompressed layer: 0.0703MB
shape: torch.Size([64, 32, 3, 3])
------ layer: layer3.0.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.1.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv1 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: layer3.2.conv2 ------
size of uncompressed layer: 0.1406MB
shape: torch.Size([64, 64, 3, 3])
------ layer: linear ------
size of uncompressed layer: 0.0024MB
shape: torch.Size([10, 64])
conv1.dictionary
compressed layer : torch.Size([16, 3, 3, 3])
target layer :     torch.Size([16, 3, 3, 3])

conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.0.conv1.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv1.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.0.conv2.dictionary
compressed layer : torch.Size([14, 16, 3, 3])
target layer :     torch.Size([14, 16, 3, 3])

layer1.0.conv2.coef
compressed layer : torch.Size([16, 14, 1, 1])
target layer :     torch.Size([16, 14, 1, 1])

layer1.1.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.1.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.1.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv1.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv1.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer1.2.conv2.dictionary
compressed layer : torch.Size([16, 16, 3, 3])
target layer :     torch.Size([16, 16, 3, 3])

layer1.2.conv2.coef
compressed layer : torch.Size([16, 16, 1, 1])
target layer :     torch.Size([16, 16, 1, 1])

layer2.0.conv1.dictionary
compressed layer : torch.Size([33, 16, 3, 3])
target layer :     torch.Size([33, 16, 3, 3])

layer2.0.conv1.coef
compressed layer : torch.Size([32, 33, 1, 1])
target layer :     torch.Size([32, 33, 1, 1])

layer2.0.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.0.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv1.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv1.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.1.conv2.dictionary
compressed layer : torch.Size([32, 32, 3, 3])
target layer :     torch.Size([32, 32, 3, 3])

layer2.1.conv2.coef
compressed layer : torch.Size([32, 32, 1, 1])
target layer :     torch.Size([32, 32, 1, 1])

layer2.2.conv1.dictionary
compressed layer : torch.Size([31, 32, 3, 3])
target layer :     torch.Size([31, 32, 3, 3])

layer2.2.conv1.coef
compressed layer : torch.Size([32, 31, 1, 1])
target layer :     torch.Size([32, 31, 1, 1])

layer2.2.conv2.dictionary
compressed layer : torch.Size([30, 32, 3, 3])
target layer :     torch.Size([30, 32, 3, 3])

layer2.2.conv2.coef
compressed layer : torch.Size([32, 30, 1, 1])
target layer :     torch.Size([32, 30, 1, 1])

layer3.0.conv1.dictionary
compressed layer : torch.Size([63, 32, 3, 3])
target layer :     torch.Size([63, 32, 3, 3])

layer3.0.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.0.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.0.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.1.conv2.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.1.conv2.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv1.dictionary
compressed layer : torch.Size([63, 64, 3, 3])
target layer :     torch.Size([63, 64, 3, 3])

layer3.2.conv1.coef
compressed layer : torch.Size([64, 63, 1, 1])
target layer :     torch.Size([64, 63, 1, 1])

layer3.2.conv2.dictionary
compressed layer : torch.Size([60, 64, 3, 3])
target layer :     torch.Size([60, 64, 3, 3])

layer3.2.conv2.coef
compressed layer : torch.Size([64, 60, 1, 1])
target layer :     torch.Size([64, 60, 1, 1])

linear.calcu.0
compressed layer : torch.Size([10, 64])
target layer :     torch.Size([10, 64])

linear.calcu.1
compressed layer : torch.Size([10, 10])
target layer :     torch.Size([10, 10])

Test: [0/79]	Acc@1 10.156 (10.156)	Acc@5 51.562 (51.562)
Test: [1/79]	Acc@1 10.156 (10.156)	Acc@5 49.219 (50.391)
Test: [2/79]	Acc@1 10.156 (10.156)	Acc@5 48.438 (49.740)
Test: [3/79]	Acc@1 9.375 (9.961)	Acc@5 46.094 (48.828)
Test: [4/79]	Acc@1 8.594 (9.688)	Acc@5 49.219 (48.906)
Test: [5/79]	Acc@1 7.812 (9.375)	Acc@5 51.562 (49.349)
Test: [6/79]	Acc@1 10.938 (9.598)	Acc@5 46.094 (48.884)
Test: [7/79]	Acc@1 11.719 (9.863)	Acc@5 47.656 (48.730)
Test: [8/79]	Acc@1 8.594 (9.722)	Acc@5 51.562 (49.045)
Test: [9/79]	Acc@1 10.156 (9.766)	Acc@5 43.750 (48.516)
Test: [10/79]	Acc@1 7.812 (9.588)	Acc@5 56.250 (49.219)
Test: [11/79]	Acc@1 9.375 (9.570)	Acc@5 52.344 (49.479)
Test: [12/79]	Acc@1 10.156 (9.615)	Acc@5 51.562 (49.639)
Test: [13/79]	Acc@1 13.281 (9.877)	Acc@5 50.000 (49.665)
Test: [14/79]	Acc@1 14.062 (10.156)	Acc@5 54.688 (50.000)
Test: [15/79]	Acc@1 9.375 (10.107)	Acc@5 44.531 (49.658)
Test: [16/79]	Acc@1 12.500 (10.248)	Acc@5 54.688 (49.954)
Test: [17/79]	Acc@1 10.156 (10.243)	Acc@5 50.781 (50.000)
Test: [18/79]	Acc@1 10.156 (10.238)	Acc@5 45.312 (49.753)
Test: [19/79]	Acc@1 12.500 (10.352)	Acc@5 57.031 (50.117)
Test: [20/79]	Acc@1 14.844 (10.565)	Acc@5 57.812 (50.484)
Test: [21/79]	Acc@1 10.156 (10.547)	Acc@5 57.812 (50.817)
Test: [22/79]	Acc@1 9.375 (10.496)	Acc@5 51.562 (50.849)
Test: [23/79]	Acc@1 10.938 (10.514)	Acc@5 53.906 (50.977)
Test: [24/79]	Acc@1 10.938 (10.531)	Acc@5 49.219 (50.906)
Test: [25/79]	Acc@1 9.375 (10.487)	Acc@5 47.656 (50.781)
Test: [26/79]	Acc@1 12.500 (10.561)	Acc@5 58.594 (51.071)
Test: [27/79]	Acc@1 13.281 (10.658)	Acc@5 56.250 (51.256)
Test: [28/79]	Acc@1 9.375 (10.614)	Acc@5 50.000 (51.212)
Test: [29/79]	Acc@1 9.375 (10.573)	Acc@5 49.219 (51.146)
Test: [30/79]	Acc@1 3.125 (10.333)	Acc@5 48.438 (51.058)
Test: [31/79]	Acc@1 10.156 (10.327)	Acc@5 51.562 (51.074)
Test: [32/79]	Acc@1 8.594 (10.275)	Acc@5 53.125 (51.136)
Test: [33/79]	Acc@1 5.469 (10.133)	Acc@5 54.688 (51.241)
Test: [34/79]	Acc@1 10.938 (10.156)	Acc@5 43.750 (51.027)
Test: [35/79]	Acc@1 10.156 (10.156)	Acc@5 51.562 (51.042)
Test: [36/79]	Acc@1 9.375 (10.135)	Acc@5 52.344 (51.077)
Test: [37/79]	Acc@1 8.594 (10.095)	Acc@5 45.312 (50.925)
Test: [38/79]	Acc@1 11.719 (10.136)	Acc@5 50.781 (50.921)
Test: [39/79]	Acc@1 9.375 (10.117)	Acc@5 50.000 (50.898)
Test: [40/79]	Acc@1 10.156 (10.118)	Acc@5 47.656 (50.819)
Test: [41/79]	Acc@1 7.031 (10.045)	Acc@5 49.219 (50.781)
Test: [42/79]	Acc@1 11.719 (10.084)	Acc@5 50.781 (50.781)
Test: [43/79]	Acc@1 14.062 (10.174)	Acc@5 48.438 (50.728)
Test: [44/79]	Acc@1 8.594 (10.139)	Acc@5 46.094 (50.625)
Test: [45/79]	Acc@1 7.812 (10.088)	Acc@5 43.750 (50.476)
Test: [46/79]	Acc@1 10.938 (10.106)	Acc@5 51.562 (50.499)
Test: [47/79]	Acc@1 11.719 (10.140)	Acc@5 57.031 (50.635)
Test: [48/79]	Acc@1 10.938 (10.156)	Acc@5 55.469 (50.733)
Test: [49/79]	Acc@1 6.250 (10.078)	Acc@5 49.219 (50.703)
Test: [50/79]	Acc@1 10.938 (10.095)	Acc@5 52.344 (50.735)
Test: [51/79]	Acc@1 11.719 (10.126)	Acc@5 53.125 (50.781)
Test: [52/79]	Acc@1 7.812 (10.083)	Acc@5 51.562 (50.796)
Test: [53/79]	Acc@1 13.281 (10.142)	Acc@5 59.375 (50.955)
Test: [54/79]	Acc@1 10.938 (10.156)	Acc@5 49.219 (50.923)
Test: [55/79]	Acc@1 7.031 (10.100)	Acc@5 42.188 (50.767)
Test: [56/79]	Acc@1 8.594 (10.074)	Acc@5 49.219 (50.740)
Test: [57/79]	Acc@1 11.719 (10.102)	Acc@5 51.562 (50.754)
Test: [58/79]	Acc@1 7.031 (10.050)	Acc@5 46.875 (50.689)
Test: [59/79]	Acc@1 13.281 (10.104)	Acc@5 56.250 (50.781)
Test: [60/79]	Acc@1 11.719 (10.131)	Acc@5 46.875 (50.717)
Test: [61/79]	Acc@1 9.375 (10.118)	Acc@5 50.000 (50.706)
Test: [62/79]	Acc@1 9.375 (10.107)	Acc@5 49.219 (50.682)
Test: [63/79]	Acc@1 13.281 (10.156)	Acc@5 46.875 (50.623)
Test: [64/79]	Acc@1 7.031 (10.108)	Acc@5 46.875 (50.565)
Test: [65/79]	Acc@1 5.469 (10.038)	Acc@5 45.312 (50.485)
Test: [66/79]	Acc@1 8.594 (10.016)	Acc@5 58.594 (50.606)
Test: [67/79]	Acc@1 7.812 (9.984)	Acc@5 52.344 (50.632)
Test: [68/79]	Acc@1 10.156 (9.986)	Acc@5 48.438 (50.600)
Test: [69/79]	Acc@1 12.500 (10.022)	Acc@5 50.000 (50.592)
Test: [70/79]	Acc@1 10.156 (10.024)	Acc@5 58.594 (50.704)
Test: [71/79]	Acc@1 10.938 (10.037)	Acc@5 51.562 (50.716)
Test: [72/79]	Acc@1 9.375 (10.028)	Acc@5 49.219 (50.696)
Test: [73/79]	Acc@1 6.250 (9.977)	Acc@5 55.469 (50.760)
Test: [74/79]	Acc@1 10.938 (9.990)	Acc@5 47.656 (50.719)
Test: [75/79]	Acc@1 10.938 (10.002)	Acc@5 51.562 (50.730)
Test: [76/79]	Acc@1 14.062 (10.055)	Acc@5 52.344 (50.751)
Test: [77/79]	Acc@1 6.250 (10.006)	Acc@5 53.125 (50.781)
Test: [78/79]	Acc@1 6.250 (10.000)	Acc@5 50.000 (50.780)
Top1 after quantization: 10.000, Top5 after quantization: 50.780

----------------------------------------------------------
